<?php
// $Id: custom_breadcrumbs_taxonomy.module,v 1.1.2.7 2009/07/20 12:40:23 mgn Exp $

/**
 * @file
 * This module implements taxonomy_based breadcrumbs using a hybrid of methods
 * developed for the custom_breadcrumbs and taxonomy_breadcrumbs modules.
 * Breadcrumbs are provided for node and taxonomy term pages.
 * If 'Use taxonomy hierarchy' is checked on the custom_breadcrumbs settings
 * page, then the breadcrumb trail will be like
 *   [HOME] >> [VOCABULARY] >> TERM >> [TERM] ...
 *
 *   - The HOME breadcrumb (if present) links to the home page.  The text
 *     displayed for HOME is administrator configurable on the custom_breadcrumbs
 *     settings page. 
 *   - The VOCABULARY breadcrumb (if present) will link to an administrator
 *     defined page.  If the VOCABULARY does not have an administrator
 *     defined page, it will not appear in the breadcrumb trail.
 *   - Each TERM breadcrumb will link to either
 *     (1) taxonomy/term/tid by default, or
 *     (2) an administrator defined page if one is defined for the term.
 *
 * Examples:
 *   home >> term >> term
 *   mysite >> term >> term
 *   home >> vocabulary >> term >> term
 *   vocabulary >> term >> term
 * 
 * If 'Use taxonomy hierarchy' is not checked, then the titles and paths used to 
 * construct the breadcrumb should be defined at the custom_breadcrumbs administration 
 * page in the same as other custom breadcrumbs. For a node containing multiple terms
 * and vocabularies, the lightest term with a visible, matching custom breadcrumb is
 * selected. If a taxonomy_term custom breadcrumb is not found, then taxonomy_vocabulary 
 * custom breadcrumbs are matched against the node's vocabularies.
 */

module_load_include('inc', 'custom_breadcrumbs', 'custom_breadcrumbs.admin');
module_load_include('inc', 'custom_breadcrumbs', 'custom_breadcrumbs_common');

// default value for Advanced Settings, Node Types
define('CUSTOM_BREADCRUMBS_TAXONOMY_NODE_TYPES_DEFAULT', 'book');

/**
 * Implementation of hook_cb_breadcrumb_info().
 *   @return an array with elements
 *     'table' indicating the db_table to load the breadcrumb from,
 *     'field' a field of the database table used to identify the breadcrumb
 *     'type' a string used for indicating the breadcrumb type on the admin list
 *     'name_constructor' a function which generates the breadcrumb name from the breadcrumb (optional)
 */

function custom_breadcrumbs_taxonomy_cb_breadcrumb_info() {
  $breadcrumb_type_info = array();
  $breadcrumb_type_info[] = array(
    'table' => 'custom_breadcrumbs_taxonomy_vocabulary', 
    'field' => 'vid', 
    'type' => 'taxonomy_vocabulary',
    'name_constructor' => '_custom_breadcrumbs_taxonomy_vocabulary_breadcrumb_name'
  );
  $breadcrumb_type_info[] = array(
    'table' => 'custom_breadcrumbs_taxonomy_term', 
    'field' => 'tid', 
    'type' => 'taxonomy_term',
    'name_constructor' => '_custom_breadcrumbs_taxonomy_term_breadcrumb_name'
  );
  return $breadcrumb_type_info;
}

/**
 * Construct a name to display in the admin screen from the taxonomy term.
 */
function _custom_breadcrumbs_taxonomy_term_breadcrumb_name($breadcrumb) {
  $names = array();
  $parents = taxonomy_get_parents_all($breadcrumb->tid);
  while ($parent = array_shift($parents)) {
    $names[] = $parent->name; 
  }
  $term = taxonomy_get_term($breadcrumb->tid);
  $vocabulary = taxonomy_vocabulary_load($term->vid);
  $names[] = $vocabulary->name; 
  $names = array_reverse($names);
  $output = implode('>', $names);
  return $output;
}

/**
 * Construct a name to display in the admin screen from the taxonomy vocabulary.
 */
function _custom_breadcrumbs_taxonomy_vocabulary_breadcrumb_name($breadcrumb) {
  $vocabulary = taxonomy_vocabulary_load($breadcrumb->vid);
  return $vocabulary->name;
}

/**
 * Implementation of hook_menu().
 */
function custom_breadcrumbs_taxonomy_menu() {
  $items = array();
  $items['admin/build/custom_breadcrumbs/taxonomy_term/add'] = array(
    'title'            => 'Taxonomy Term',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('custom_breadcrumbs_taxonomy_term_form', 'taxonomy_term'),
    'access arguments' => array('administer custom breadcrumbs'),
    'file'             => 'custom_breadcrumbs_taxonomy.admin.inc',
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 5,
  );
  $items['admin/build/custom_breadcrumbs/taxonomy_term/edit'] = array(
    'title'            => 'Edit custom breadcrumb for taxonomy term',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('custom_breadcrumbs_taxonomy_term_form', 'taxonomy_term'),
    'file'             => 'custom_breadcrumbs_taxonomy.admin.inc',
    'access arguments' => array('administer custom breadcrumbs'),
    'type'             => MENU_CALLBACK,
  );
    $items['admin/build/custom_breadcrumbs/taxonomy_vocabulary/add'] = array(
    'title'            => 'Taxonomy Vocabulary',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('custom_breadcrumbs_taxonomy_vocabulary_form', 'taxonomy_vocabulary'),
    'access arguments' => array('administer custom breadcrumbs'),
    'file'             => 'custom_breadcrumbs_taxonomy.admin.inc',
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 5,
  );
  $items['admin/build/custom_breadcrumbs/taxonomy_vocabulary/edit'] = array(
    'title'            => 'Edit custom breadcrumb for taxonomy vobaculary',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('custom_breadcrumbs_taxonomy_vocabulary_form', 'taxonomy_vocabulary'),
    'access arguments' => array('administer custom breadcrumbs'),
    'file'             => 'custom_breadcrumbs_taxonomy.admin.inc',
    'type'             => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_nodeapi().
 */
function custom_breadcrumbs_taxonomy_nodeapi($node, $op, $teaser, $page) {
  if ($op == 'alter' && empty($teaser) && !empty($page)) {
    if (_custom_breadcrumbs_taxonomy_allowed_node_type($node->type)) {
      // Extract lightest term from lightest vocabulary assosciated with node.
      module_load_include('inc', 'custom_breadcrumbs_taxonomy');
      $term = custom_breadcrumbs_taxonomy_node_get_lightest_term($node->nid);
      if ($term) {
        $terms = taxonomy_node_get_terms($node);
        _custom_breadcrumbs_taxonomy_set_breadcrumb($term->tid, NULL, FALSE, array('node' => $node), $terms);
      }
    }
  }
}

/**
 * Implementation of hook_menu_alter().
 */
function custom_breadcrumbs_taxonomy_menu_alter(&$callbacks) {

  // This will not work if views has overriden taxonomy/term/%
  if (isset($callbacks['taxonomy/term/%']) && ($callbacks['taxonomy/term/%']['page callback'] != 'views_page')) {
    $term_callback = &$callbacks['taxonomy/term/%'];
    $callback = $term_callback['page callback'];
    $arguments = $term_callback['page arguments'];
    $file = $term_callback['file'];
    $filepath = isset($term_callback['file path']) ? $term_callback['file path'] : drupal_get_path('module', $term_callback['module']);
    $term_callback['page callback'] = 'custom_breadcrumbs_taxonomy_term_page';
    $term_callback['page arguments'] = array_merge(array($callback, $file, $filepath, 2), $arguments);
    $term_callback['file'] = 'custom_breadcrumbs_taxonomy.inc';
    $term_callback['file path'] = drupal_get_path('module', 'custom_breadcrumbs_taxonomy');
  }

}

/**
 * Implementation of hook_views_pre_render().
 */
function custom_breadcrumbs_taxonomy_views_pre_render(&$view) {
  if (variable_get('custom_breadcrumbs_taxonomy_views', FALSE)) {
    // Set the taxonomy breadcrumb for the view.
    if (!empty($view->display)) {
      foreach ($view->display as $display) {
        if (!empty($display->display_options['arguments'])) {
          // Try to use the view argument to generate the breadcrumb.
          foreach ($display->display_options['arguments'] as $argument) {
            $args = $display->handler->view->args;
            $arg = array_pop($args);
            $tid = NULL;
            $vid = NULL;
            switch ($argument['id']) {
              case 'tid':
              case 'term_node_tid_depth':
                $terms = taxonomy_terms_parse_string($arg);
                $tid = empty($terms['tids']) ? NULL : $terms['tids'][0];
                break;
              case 'name':
                if (drupal_substr($argument['table'], 0, 5) == 'term_') {
                  $terms = taxonomy_get_term_by_name($arg);
                  $tid = empty($terms) ? NULL : $terms[0]->tid;
                }
                break;
              case 'vid':
                $vid = $arg;
                break;
            }
            if (!is_null($tid) || !is_null($vid)) {
              module_load_include('inc', 'custom_breadcrumbs_taxonomy');
              $terms = array();
              if (!is_null($tid)) {
                $term = taxonomy_get_term($tid);
                if ($term) {
                  $terms[$term->tid] = $term;
                }
              }
              _custom_breadcrumbs_taxonomy_set_breadcrumb($tid, $vid, TRUE, array('view' => $view), $terms);
              return;
            }
          }
        }
      }
      // Otherwise, use the first result node that is of an allowed node type to generate the breadcrumb.
      if (_custom_breadcrumbs_allowed_display($display) && !empty($view->result)) {
        foreach ($view->result as $result) {
          if (isset($result->nid)) {
            $node = node_load(array('nid' => $result->nid));
            if (_custom_breadcrumbs_taxonomy_allowed_node_type($node->type)) {
              module_load_include('inc', 'custom_breadcrumbs_taxonomy');
              $term = custom_breadcrumbs_taxonomy_node_get_lightest_term($node->nid);
              if ($term) {
                $terms = taxonomy_node_get_terms($node);
                _custom_breadcrumbs_taxonomy_set_breadcrumb($term->tid, NULL, TRUE, array('node' => $node), $terms);
                return;
              }
            }
          }
        }
      }
    }
  }
}
/**
 * Implementation of hook_help().
 */
function custom_breadcrumbs_taxonomy_help($path, $arg) {
  switch ($path) {
    case 'admin/help#custom_breadcrumbs_taxonomy':
      return t('The custom_breadcrumbs_taxonomy module generates taxonomy based breadcrumbs on node pages and taxonomy/term pages.  The breadcrumb trail takes on the form:
        <ul>[HOME] >> [VOCABULARY] >> TERM >> [TERM] ...</ul>
        <ul>
        <li>The text displayed for HOME is configurable below.  The <em>HOME </em>breadcrumb (if present) links to the homepage.  The text displayed for HOME is administrator configurable.  If the HOME breadcrumb is not defined by the administrator, it will not appear in the breadcrumb trail.</li>
        <li>The <em>VOCABULARY </em>breadcrumb (if present) will link to an administrator defined page.  If the VOCABULARY does not have an administrator defined page, it will not appear in the breadcrumb trail. </li>
        <li>Each <em>TERM </em>breadcrumb will link to either (1) taxonomy/term/tid by default, or (2) an administrator defined page if one is defined for the term. This can be configured on the add/edit term pages within !tax_link (taxonomy).</li>
        </ul>
        <br />
        <p>Examples:
        <ul>
        <li>home >> term >> term</li>
        <li>mysite >> term >> term</li>
        <li>home >> vocabulary >> term >> term</li>
        <li>vocabulary >> term >> term</li>
        </ul>', array('!tax_link' => l('administer >> content management >> taxonomy', 'admin/content/taxonomy')));
  }
}

/**
 * Implementation of hook_form_alter.
 */
function custom_breadcrumbs_taxonomy_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'custom_breadcrumbs_admin_settings') {
    $form['settings']['custom_breadcrumbs_taxonomy_use_hierarchy'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use the taxonomy hierarchy to set the breadcrumb trail for nodes and taxonomy pages'),
      '#description' => t('If selected, the custom breadcrumb trail will be constructed from the taxonomy vocabulary and terms associated with the node. Breadcrumb titles will be selected from taxonomy term and vocabulary names.'),
      '#default_value' => variable_get('custom_breadcrumbs_taxonomy_use_hierarchy', TRUE),
      '#weight' => 10,
    );

    $form['settings']['custom_breadcrumbs_taxonomy_append_breadcrumb'] = array(
      '#type'           => 'checkbox',
      '#title'          => t('Append taxonomy breadcrumb trail to current breadcrumb for selected node types'),
      '#default_value'  => variable_get('custom_breadcrumbs_taxonomy_append_breadcrumb', FALSE),
      '#description'    => t('When enabled along with the taxonomy hierarchy option (above), the taxonomy breadcrumb trail will be appended to the current breadcrumb trail.'),
      '#weight'         => 20,
    );

    $form['settings']['custom_breadcrumbs_taxonomy_show_vocabulary'] = array(
      '#type'           => 'checkbox',
      '#title'          => t('Show vocabulary in breadcrumb trail?'),
      '#description'    => t('When enabled, the vocabulary name will be shown in the breadcrumb trail, even when a custom breadcrumb has not been defined for the vocabulary. In this case the crumb will not be linked. If a custom breadcrumb has been defined for the vocabulary, it will be displayed whether or not this option is enabled.'),
      '#default_value'  => variable_get('custom_breadcrumbs_taxonomy_show_vocabulary', FALSE),
      '#weight' => 25,
    );

    $form['settings']['custom_breadcrumbs_taxonomy_show_current_term'] = array(
      '#type'           => 'checkbox',
      '#title'          => t('Show current taxonomy term in breadcrumb trail?'),
      '#description'    => t('When enabled, the lightest term associated with node is shown as the last breadcrumb in the breadcrumb trail.  When disabled, the only terms shown in the breadcrumb trail are parent terms (if any parents exist).  The recommended setting is enabled.'),
      '#default_value'  => variable_get('custom_breadcrumbs_taxonomy_show_current_term', TRUE),
      '#weight' => 30,
    );

    $form['settings']['custom_breadcrumbs_taxonomy_include_node_title'] = array(
      '#type'           => 'checkbox',
      '#title'          => t('Show current node title in taxonomy breadcrumb trail?'),
      '#default_value'  => variable_get('custom_breadcrumbs_taxonomy_include_node_title', FALSE),
      '#description'    => t('When enabled along with the taxonomy hierarchy option (above) and when viewing a node, the node\'s title will be shown as the last breadcrumb in the breadcrumb trail.'),
      '#weight'         => 40,
    );

 $form['settings']['custom_breadcrumbs_taxonomy_views'] = array(
      '#type'           => 'checkbox',
      '#title'          => t('Use taxonomy breadcrumbs for views?'),
      '#default_value'  => variable_get('custom_breadcrumbs_taxonomy_views', FALSE),
      '#description'    => t('When enabled, the view argument and/or the taxonomy structure of nodes returned by views will be used to form the taxonomy breadcrumb trail.'),
      '#weight'         => 50,
    );

    $form['adv_settings']['custom_breadcrumbs_taxonomy_include_nodes'] = array(
      '#type'           => 'radios',
      '#title'          => t('Include or exclude taxonomy-based breadcrumbs for the following node types'),
      '#default_value'  => variable_get('custom_breadcrumbs_taxonomy_include_nodes', FALSE),
      '#options'        => array(TRUE => t('Include'), FALSE => t('Exclude')),
      '#weight'         => 10,
    );

    $cb_tax_types = (array) variable_get('custom_breadcrumbs_taxonomy_node_types', CUSTOM_BREADCRUMBS_TAXONOMY_NODE_TYPES_DEFAULT);
    $default = array();
    foreach ($cb_tax_types as $index => $value) {
      if ($value) {
        $default[] = $index;
      }
    }

    $form['adv_settings']['custom_breadcrumbs_taxonomy_node_types'] = array(
      '#type'           => 'checkboxes',
      '#multiple'       => TRUE,
      '#title'          => t('Node types to include or exclude'),
      '#default_value'  => $default,
      '#options'        => array_map('check_plain', node_get_types('names')),
      '#description'    => t('A list of node types to include or exclude applying taxonomy-based breadcrumbs.'),
      '#weight'         => 20,
    );
  }
}

/**
 * Implementation of hook_form_alter().
 */
function custom_breadcrumbs_taxonomy_form_taxonomy_form_vocabulary_alter(&$form, &$form_state) {
  // Load all custom breadcrumbs for this vid.
  $breadcrumbs = custom_breadcrumbs_load_breadcrumbs('custom_breadcrumbs_taxonomy', 'custom_breadcrumbs_taxonomy_vocabulary', array('vid' => $form['vid']['#value']));
  $output = NULL;
  if (count($breadcrumbs) > 0) {
    $output = '<p>'. t('Custom breadcrumbs have been created for this vocabulary. Use the !link to add additional breadcrumbs. Or follow the links in the table below to edit or delete existing custom breadcrumbs.', array('!link' => l('Custom Breadcrumbs Administration Page', 'admin/build/custom_breadcrumbs'))) .'</p>';
  } 
  // Show a table of custom breadcrumbs with links to the edit form.
  $output .= custom_breadcrumbs_simple_breadcrumb_table($breadcrumbs);
  $form['custom_breadcrumbs_taxonomy_vocabulary'] = array(
    '#type'           => 'fieldset',
    '#title'          => t('Custom Breadcrumbs for Taxonomy'),
    '#collapsible'    => TRUE,
    '#collapsed'      => TRUE,
    '#weight'         => -50,
  );
  $form['custom_breadcrumbs_taxonomy_vocabulary']['breadcrumb_table'] = array('#value' => $output, );
}

/**
 * Implementation of hook_form_alter().
 */
function custom_breadcrumbs_taxonomy_form_taxonomy_form_term_alter(&$form, &$form_state) {
 // Load all custom breadcrumbs for this tid.
   $breadcrumbs = custom_breadcrumbs_load_breadcrumbs('custom_breadcrumbs_taxonomy', 'custom_breadcrumbs_taxonomy_term', array('tid' => $form['tid']['#value']));
  $output = NULL;
  if (count($breadcrumbs) > 0) {
    $output = '<p>'. t('Custom breadcrumbs have been created for this term. Use the !link to add additional breadcrumbs. Or follow the links in the table below to edit or delete existing custom breadcrumbs.', array('!link' => l('Custom Breadcrumbs Administration Page', 'admin/build/custom_breadcrumbs'))) .'</p>';
  } 
  // Show a table of custom breadcrumbs with links to the edit form.
  $output .= custom_breadcrumbs_simple_breadcrumb_table($breadcrumbs);
  $form['custom_breadcrumbs_taxonomy_term'] = array(
    '#type'           => 'fieldset',
    '#title'          => t('Custom Breadcrumbs for Taxonomy'),
    '#collapsible'    => TRUE,
    '#collapsed'      => TRUE,
    '#weight'         => -50,
  );
  $form['custom_breadcrumbs_taxonomy_term']['breadcrumb_table'] = array('#value' => $output, );
}

/**
 * Implementation of hook_cb_node_form_table. 
 * @param $node 
 *   The node object being edited  
 * @return $breadcrumbs
 *   an array of breadcrumb objects for taxonomy terms and vocabs matching the node
 *   to be used in the custom_breadcrumbs fieldset on the node edit page
 */
function custom_breadcrumbs_taxonomy_cb_node_form_table($node) {
  $breadcrumbs = array();
  if (_custom_breadcrumbs_taxonomy_allowed_node_type($node->type)) {
    if (!variable_get('custom_breadcrumbs_taxonomy_use_hierarchy', TRUE)) {
      // Check each term to see if it has a custom breadcrumb.
      $terms = taxonomy_node_get_terms($node);
      foreach ($terms as $term) {
        $more = custom_breadcrumbs_load_breadcrumbs('custom_breadcrumbs_taxonomy', 'custom_breadcrumbs_taxonomy_term', array('tid' => $term->tid));
        if (!empty($more)) {
          $breadcrumbs = array_merge($breadcrumbs, $more);
        }
      }
      // Also look for a match on the taxonomy vocabulary.
      $vocabularies = taxonomy_get_vocabularies($node->type);
      foreach ($vocabularies as $vocabulary) {
        $more = custom_breadcrumbs_load_breadcrumbs('custom_breadcrumbs_taxonomy', 'custom_breadcrumbs_taxonomy_vocabulary', array('vid' => $vocabulary->vid));
        if (!empty($more)) {
         $breadcrumbs = array_merge($breadcrumbs, $more);
        }
      }
    }
  }
  return $breadcrumbs;
}

/**
 *  Helper function to determine if the current node is one of the types listed on the
 *  the advanced settings page. 
 *  @param $nodetype
 *    The node type being considered for a custom breadcrumb.
 *  @return $allowed
 *    TRUE if the node type is selected for a custom breadcrumbs taxonomy breadcrumb.
 *    FALSE otherwise.
 */
function _custom_breadcrumbs_taxonomy_allowed_node_type($nodetype) {
  // If the node type IS IN     the node types list and the list IS     inclusive OR
  // If the node type IS NOT IN the node types list and the list IS NOT inclusive (e.g. exclusive)
  // THEN modify the breadcrumb trail.

  $array_of_types = array_filter((array)variable_get('custom_breadcrumbs_taxonomy_node_types', CUSTOM_BREADCRUMBS_TAXONOMY_NODE_TYPES_DEFAULT));
  $in_list = in_array($nodetype, $array_of_types);
  $allowed = ($in_list == variable_get('custom_breadcrumbs_taxonomy_include_nodes', FALSE));
  return $allowed;
}
